#!/usr/bin/env swift
import Foundation

struct DrawTask: Codable {
  var inputFile: String
  var outputDir: String
  var outputFilename: String
  var scaledResolutions: [Int: [Int]]
}

extension DrawTask {
  func inkscapeCommands(forceOverride: Bool = false) -> [String] {
    scaledResolutions.flatMap { resolution, scales in
      scales.compactMap {
        let scaleExtension = ($0 != 1) ? "@\($0)x" : ""
        let destination =
         URL(fileURLWithPath: outputDir)
          .appendingPathComponent(outputFilename + "\(resolution)" + scaleExtension)
          .appendingPathExtension("png")
        
        if forceOverride || !FileManager.default.fileExists(atPath: destination.path)  {
          return "file-open:\(URL(fileURLWithPath: inputFile).path); export-filename:\(destination.path); export-width:\(resolution * $0); export-do"
        } else {
          return nil
        }
      }
    }
  }
}

@discardableResult func shell(_ command: String) -> (String?, Int32) {
  let task = Process()
  
  task.launchPath = "/bin/bash"
  task.arguments = ["-c", command]
  
  let pipe = Pipe()
  task.standardOutput = pipe
  task.standardError = pipe
  task.launch()
  
  let data = pipe.fileHandleForReading.readDataToEndOfFile()
  let output = String(data: data, encoding: .utf8)
  task.waitUntilExit()
  return (output, task.terminationStatus)
}


func perform(tasks: [DrawTask], forceOverride: Bool) {
  let tmpURL = URL(fileURLWithPath: "/tmp/drawcommands\(Int.random(in: 1...999))")
  shell("touch \(tmpURL.path)")
  guard let fileUpdater = try? FileHandle(forUpdating: tmpURL) else { exit(0) }
  fileUpdater.seekToEndOfFile()


  for task in tasks {
    task.inkscapeCommands(forceOverride: forceOverride).forEach {
  //    shell("echo \($0) >> /Users/nicolas/Desktop/commands.txt")
      fileUpdater.write("\($0)\n".data(using: .utf8)!)
    }
  }
  fileUpdater.write("quit".data(using: .utf8)!)

  fileUpdater.closeFile()

  shell("inkscape --shell < \(tmpURL.path)")
  // shell("rm -f  \(tmpURL.path)")
}

func encodeJSON(_ task: DrawTask) throws -> Data {
  let encoder = JSONEncoder()
  return try encoder.encode(task)
}

func readJSONDrawTasks(_ url: URL) throws -> [DrawTask] {
  let encodedJSON = try Data(contentsOf: url)
  let decoder = JSONDecoder()
  let decoded = try decoder.decode([DrawTask].self, from: encodedJSON)
  return decoded
}


// Start
if let tasks = try? readJSONDrawTasks(URL(fileURLWithPath: "./draw-tasks.json")) {
  perform(tasks: tasks, forceOverride: false)
} else {
  print("No draw-tasks.json file found or it is misformatted!")
}

// perform(tasks: tasks, forceOverride: true)

//  chmod u+x script.swift
